package com.ist.rylibrary.base.controller;

import android.content.Context;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.util.Log;

import com.ist.rylibrary.base.application.RyApplication;
import com.ist.rylibrary.base.event.ChassisMessageEvent;
import com.ist.rylibrary.base.util.ToolUtil;
import com.wewins.robot.Dipan;
import com.wewins.robot.DipanGs;
import com.wewins.robot.Human;
import com.wewins.robot.HumanListener;

import org.greenrobot.eventbus.EventBus;

/**
 * Created by minyuchun on 2017/3/27.
 */

public class ChassisController {

    private static ChassisController mChassisController;

    private Human human;

    private ChassisListener mChassisListener;

    private String pointMessage = null;

    private String TAG = "ChassisController";

    private YinDaoListener mYinDaoListener;

    private JiangJieListener mJiangJieListener;

    public static ChassisController getInstance(){
        if(mChassisController == null){
            mChassisController = new ChassisController();
        }
        return mChassisController;
    }

    public ChassisController(){
        human = new Human();
    }

    /**
     * 发送默认的地盘消息
     * @param message  消息内容
     */
    public void post(String message){
        post(false,message);
    }
    /***
     * 发送地盘消息
     * @param isCustom 是否自定义处理
     * @param message 发送的地盘内容
     */
    public void post(boolean isCustom,String message){
        EventBus.getDefault().post(new ChassisMessageEvent(isCustom,message));
    }

    /**
     * 自定义消息回收处理
     * @param isCustom  是否自定义
     * @param message  消息内容
     */
    public void recovery(boolean isCustom,String message){
        if(mChassisListener!=null){
            mChassisListener.ChassisMessage(isCustom,message);
        }
    }

    /**
     * 设置地盘监听
     * @param listener 新的监听
     */
    public void setChassisListener(ChassisListener listener) {
        this.mChassisListener = listener;
    }

    /***
     * 地盘监听
     */
    public interface ChassisListener{
        void ChassisMessage(boolean isCustom,String message);
    }

    public Human getHuman() {
        return human;
    }

    public void defaultHandling(String message){
        pointMessage = message;
        if(pointMessage.indexOf("_yindao")>-1){
            String point = pointMessage.split("_")[0];
            human.navigate(point,1000);
        }
    }

    public void connect(final Context context){
        human.init(new HumanListener() {
            @Override
            public void onWalkResult(int result) {
                Log.i(TAG,"onWalkResult result == "+result);
            }

            @Override
            public void onCtrlResult(int result) {
                Log.i(TAG,"onCtrlResult result == "+result);
            }

            @Override
            public void onNavigateResult(int result, String where) {
                Log.i(TAG,"onNavigateResult result == "+result + "where == "+where);
                if (result == Dipan.TOO_CLOSE_TO_OBSTACLES){
//                    ToolUtil.getInstance().
                    Log.i(TAG,"距离障碍物太近了 ");
                }else if(result == Dipan.REACHED){
                    Log.i(TAG,"到达目的地 ");
                }else if(result == Dipan.PLANNING){
                    Log.i(TAG,"正在规划路径 ");
                }else if(result == Dipan.HEADING){
                    Log.i(TAG,"正在前往目的地 ");
                }else if(result == Dipan.TIME_OUT){
                    Log.i(TAG,"超时 ");
                }else if(result == Dipan.UNREACHED){
                    Log.i(TAG,"达到目的地附近 ");
                }else if(result == Dipan.UNREACHABLE){
                    Log.i(TAG,"不能到达目的地 ");
                }else if(result == Dipan.GOAL_NOT_SAFE){
                    Log.i(TAG,"目的地有障碍物 ");
                }else if(result == Dipan.LOCALIZATION_FAILED){
                    Log.i(TAG,"定位失败 ");
                }
                RyApplication.getLog().d("引导监听是否为null?"+mYinDaoListener+",讲解监听是否为null?"+mJiangJieListener);
                if(result == Dipan.REACHED || result == Dipan.UNREACHED){
                    if(mYinDaoListener!=null){
                        mYinDaoListener.YinDaoComplete(result);
                    }
                    if(mJiangJieListener!=null){
                        mJiangJieListener.JiangJieComplete(result,where);
                    }
                }
            }

            @Override
            public void onLocation(int x, int y, int jd, int xSpeed, int rotSpeed, int stat) {
//                Log.i(TAG,"onLocation result == "+result + "where == "+where);
            }

            @Override
            public void onError(int type, String info) {
                Log.i(TAG,"onError type == "+type + "info == "+info);
                if(mYinDaoListener!=null){
                    mYinDaoListener.YinDaoError(type);
                }
                if(mJiangJieListener!=null){
                    mJiangJieListener.JiangJieError(type);
                }
            }
        }, getLocalIp(context));
    }

    /**
     * 引导处理
     * @param where  到达的点位
     */
    private void dealYindao(String where){
        if (pointMessage.indexOf(where)>-1){
            RyApplication.getLog().d("到达点位 "+where+" 说话 内容 "+pointMessage);
            String[] pointSplit = pointMessage.split("_");
            String instructions = "";
            if(pointSplit.length == 3){
                instructions = pointSplit[0]+"_"+pointSplit[1];
                String answer = SceneController.getInstance().rrPeople(instructions,null);
                if(pointSplit[2].equals("true")){
                    AiuiController.getInstance().post(true,answer);
                }else {
                    AiuiController.getInstance().post(answer);
                }
            }else{
                String answer = SceneController.getInstance().rrPeople(pointMessage,null);
                AiuiController.getInstance().post(answer);
            }
        }
    }

    /***
     * 获取 本地地盘的ip
     * @return 返回地盘ip
     */
    public String getLocalIp(Context context){
        String returnStr = null;
        try{
            WifiManager wifiManager = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);
            WifiInfo wifiInfo = wifiManager.getConnectionInfo();
            int ipAddress = wifiInfo.getIpAddress();
            if(ipAddress==0)return "192.168.0.1";
            returnStr= ((ipAddress & 0xff)+"."+(ipAddress>>8 & 0xff)+"."
                    +(ipAddress>>16 & 0xff)+"."+(ipAddress>>24 & 0xff));
        }catch (Exception e){
            e.printStackTrace();
        }
        Log.i(TAG,"returnStr = "+returnStr);
        return returnStr;
    }

    public void setYinDaoListener(YinDaoListener yinDaoListener) {
        mYinDaoListener = yinDaoListener;
    }

    public void setJiangJieListener(JiangJieListener jiangJieListener) {
        mJiangJieListener = jiangJieListener;
    }

    /***
     * 　引导的底盘监听
     */
    public interface YinDaoListener{
        void YinDaoComplete(int resultType);
        void YinDaoError(int errorType);
    }

    /***
     * 　讲解的底盘监听
     */
    public interface JiangJieListener{
        /**
         * 讲解移动时的结果返回
         * @param resultType 结果返回类型
         * @param where 地点
         */
        void JiangJieComplete(int resultType,String where);
        /***
         * 讲解准备时 结果返回
         * @param errorType 准备结果返回
         */
        void JiangJieError(int errorType);
    }

}
