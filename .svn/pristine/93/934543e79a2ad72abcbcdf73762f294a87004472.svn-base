package com.ist.rylibrary.base.controller;

import com.ist.rylibrary.base.application.RyApplication;
import com.ist.rylibrary.base.service.AiuiService;
import com.renying.m4.AIUI;
import com.wewins.robot.Dipan;

/**
 * Created by minyuchun on 2017/3/30.
 * 引导流程控制类
 */

public class YinDaoController {
    /**引导类实例*/
    private static YinDaoController sYinDaoController;
    /**引导移动完成后的指令*/
    private String yindaoAction;
    /**是否在引导流程*/
    private  boolean isInYindaoProcess;

    public static YinDaoController getInstance(){
        if(sYinDaoController == null){
            sYinDaoController = new YinDaoController();
        }
        return sYinDaoController;
    }
    private YinDaoController(){
    }

    /**
     * 处理引导流程的底盘指令
     * @param action  引导指令
     */
    public void dealChassisAction(String action){
        try{
            YindaoStart();
            RyApplication.getLog().d("底盘动作_引导流程");
            if(action.indexOf("_")>-1){
                String[] chassisSplit = action.split("_");
                if(chassisSplit.length == 3){
                    if(chassisSplit[2].equals("true")){
                        ChassisController.getInstance().post(true,action);
                    }else{
                        ChassisController.getInstance().post(chassisSplit[0]);
                    }
                    setYindaoAction(chassisSplit[0]+"_"+chassisSplit[1]);
                }else if (chassisSplit.length == 2){
                    ChassisController.getInstance().post(chassisSplit[0]);
                    setYindaoAction(action);
                }else{
                    ChassisController.getInstance().post(action);
                    setYindaoAction(action);
                }
            }
            AiuiController.getInstance().setJiangJieListener(null);
            ChassisController.getInstance().setJiangJieListener(null);
        }catch (Exception e){
            e.printStackTrace();
            AiuiController.getInstance().post(AiuiService.AIUI_TYPE_OPEN);
        }
    }

    public void setYindaoAction(String yindaoAction) {
        this.yindaoAction = yindaoAction;

    }

    public void YindaoStart(){
        isInYindaoProcess = true;
        ChassisController.getInstance().setYinDaoListener(new ChassisController.YinDaoListener() {
            @Override
            public void YinDaoComplete(int resultType) {
                RyApplication.getLog().d("引导动作完成 "+resultType);
                ChassisController.getInstance().setYinDaoListener(null);
                if(resultType == Dipan.REACHED || resultType == Dipan.UNREACHED){
                    RyApplication.getLog().d("引导动作完成后的话 "+yindaoAction);
                    SceneController.getInstance().rrPeople(yindaoAction,null);
                    AiuiController.getInstance().setYinDaoListener(new AiuiController.YinDaoListener() {
                        @Override
                        public void YinDaoComplete(boolean isComplete) {
                            YindaoEnd();
                        }
                    });
                }
            }
            @Override
            public void YinDaoError(int errorType) {
                if (errorType != Dipan.E_ONCONNET){
                    YindaoEnd();
                }

            }
        });
        AiuiController.getInstance().post(AiuiService.AIUI_TYPE_CLOSE);
    }

    public boolean isInYindaoProcess() {
        return isInYindaoProcess;
    }

    public void setInYindaoProcess(boolean inYindaoProcess) {
        isInYindaoProcess = inYindaoProcess;
    }

    /**
     * 引导流程结束
     */
    public void YindaoEnd(){
        this.yindaoAction = null;
        isInYindaoProcess = false;
        AiuiController.getInstance().post(AiuiService.AIUI_TYPE_OPEN);
        AiuiController.getInstance().setYinDaoListener(null);
        ChassisController.getInstance().setYinDaoListener(null);
        ChassisController.getInstance().getHuman().stop();
    }
}
