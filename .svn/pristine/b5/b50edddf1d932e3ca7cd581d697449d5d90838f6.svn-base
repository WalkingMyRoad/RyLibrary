package com.ist.rylibrary.base.service;

import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.media.AudioManager;
import android.os.Handler;
import android.os.IBinder;
import android.support.annotation.Nullable;
import android.util.Log;

import com.ist.rylibrary.base.application.RyApplication;
import com.ist.rylibrary.base.controller.ActivityController;
import com.ist.rylibrary.base.controller.AiuiController;
import com.ist.rylibrary.base.controller.InfraredController;
import com.ist.rylibrary.base.controller.JiangJieController;
import com.ist.rylibrary.base.controller.SceneController;
import com.ist.rylibrary.base.controller.YinDaoController;
import com.ist.rylibrary.base.entity.MallDictsBean;
import com.ist.rylibrary.base.event.InfraredMessageEvent;
import com.ist.rylibrary.base.function.HttpMallDictsFunction;
import com.ist.rylibrary.base.inter.BaseHttpServiceInter;
import com.ist.rylibrary.base.util.HttpUtil;
import com.ist.rylibrary.base.util.TimeUtil;
import com.ist.rylibrary.base.util.ToolUtil;

import org.greenrobot.eventbus.Subscribe;
import org.greenrobot.eventbus.ThreadMode;

import java.util.List;

import io.reactivex.Observer;
import io.reactivex.android.schedulers.AndroidSchedulers;
import io.reactivex.disposables.Disposable;
import io.reactivex.schedulers.Schedulers;


/**
 * Created by minyuchun on 2017/3/6.
 * 广播服务
 */

public class InfraredService extends Service {
    private  String TAG="InfraredService";

    /**缓存intent*/
    private static Intent sIntent;

    /**有人的频率*/
    private int personExitFrequency = 0;

    /**无人的频率*/
    private int personNonexistenceFrequency = 0;

    /***引导的频率**/
    public static int guideTime=0;

    /**引导总的频率**/
    private int countGuidetime=15;

    /**引导的音量**/
    private  int guideVolume=0;

    /***吆喝的频率**/
    private int shutTime=0;

    /**吆喝总的频率**/
    private int countShutTime=15;

    /**吆喝的音量**/
    private int shutVolume=0;

    /**全局变量**/
    private static RyApplication application;

    /**吆喝的声音是否调整**/
    private boolean isChangeShutVolum=false;

    /**引导的声音是否调整**/
    private boolean isChangeGuideVolum=false;

    private Handler handler=new Handler();

   /**吆喝的开关 1 开 0 关**/
    private String shut_switch="1";




    /***
     * 打开service
     * @param context
     */
    public static void getInstance(Context context) {
        sIntent = new Intent(context, InfraredService.class);
        context.startService(sIntent);
        application=(RyApplication)context.getApplicationContext();
    }
    /***
     * 关闭服务
     * @param context
     */
    public static void finishService(Context context){
        if(sIntent!=null){
            context.stopService(sIntent);
            sIntent = null;
        }

    }

    @Nullable
    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }

    @Override
    public void onCreate() {
        super.onCreate();
        ToolUtil.getInstance().loadEventBus(this);

        handler.postDelayed(new Runnable() {
            @Override
            public void run() {
                getdata();
                handler.postDelayed(this,30*1000*60);
            }
        },1);


        //动态添加广播
        try {
            IntentFilter filter = new IntentFilter();
            filter.addAction("android.intent.action.IRDOWN");//红外有人
            filter.addAction("android.intent.action.IRUP");//红外无人
            registerReceiver(myInfraredReceiver, filter);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    private void getdata(){
        String[] dicts={"shut_time","guide_time","shut_volume","guide_volume","shut_switch"};
        for(int i=0;i<dicts.length;i++){
            getMallDict(dicts[i],i);
        }
    }
    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        return super.onStartCommand(intent, flags, startId);
    }
    /***
     * 广播注册实例
     */
    public BroadcastReceiver myInfraredReceiver = new BroadcastReceiver() {
        @SuppressWarnings("unused")
        @Override
        public void onReceive(Context context, Intent intent) {
            String action = intent.getAction();
            if(!TimeUtil.getInstance().isLessTimeInterval(500)){
                if (action.equals("android.intent.action.IRDOWN")) {
                    Log.i(TAG,"--红外有人--");
                    personExitFrequency++;
                    personNonexistenceFrequency = 0;
                    if(!ActivityController.getInstance().isInBusiness()){
                        shutTime++;
                        playShutVoice();
                        guideTime=0;
                    }else{
                        guideTime++;
                        playGuideVoice();
                        shutTime=0;
                    }

                    InfraredController.getInstance().post(true,true,personExitFrequency);
                } else if (action.equals("android.intent.action.IRUP")) {
                    Log.i(TAG,"--红外无人--");
                    personNonexistenceFrequency++;
                    personExitFrequency = 0;
                    shutTime++;

                    playShutVoice();
                    guideTime=0;
                    InfraredController.getInstance().post(true,false,personNonexistenceFrequency);
                }
            }
        }
    };

    /**
     *播放吆喝语
     * **/
    private void playShutVoice(){
        if(shut_switch.equals("0")){
            shutTime=0;
            Log.i(TAG,"吆喝关闭状态！");
            return;
        }
        /*
        * 在引导
        * **/

        if(YinDaoController.getInstance().isInYindaoProcess()){
            shutTime=0;
            Log.i(TAG,"在引导过程中，不开启吆喝！");
            return;
        }
        if(JiangJieController.getInstance().isInJiangJieProcess()){
            shutTime=0;
            Log.i(TAG,"在讲解过程中，不开启吆喝！");
            return;
        }
        isChangeGuideVolum=false;
        if(shutTime>=countShutTime){
            if(!isChangeShutVolum && shutVolume!=0){
                setVolume(shutVolume);
            }
            shutTime=0;
            SceneController.getInstance().rrPeople("#cmd_shut_voice#","");
        }else{
            Log.i(TAG,"吆喝频率到计时："+shutTime);
        }
    }


    /**
     * 播放引导内容
     *
     * **/
    private void playGuideVoice(){
        isChangeShutVolum=false;
        if(!isChangeGuideVolum&&guideVolume!=0){
          setVolume(guideVolume);
        }
        if(guideTime>=countGuidetime){
            guideTime=0;
            if(application.isChat()){
                SceneController.getInstance().rrPeople("#cmd_guide_voice#","");
            }else{
                String guideText=application.getGuidText();
                Log.i(TAG,"循环播放的内容是："+guideText);
                if(guideText!=null&&!guideText.equals("")){
                     if(guideText.startsWith("#")){
                         SceneController.getInstance().rrPeople(guideText,"");
                     }else{
                         AiuiController.getInstance().startTTS(guideText);
                     }
                }else{
                    Log.i(TAG,"循环引导的内容为空!");
                }

            }
        }else{
            Log.i(TAG,"引导频率到计时："+guideTime);
        }

    }


    @Override
    public void onDestroy() {
        super.onDestroy();
        ToolUtil.getInstance().relieveEventBus(this);
        //解除注册
        try {
            if (myInfraredReceiver != null) {
                unregisterReceiver(myInfraredReceiver);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * eventsbus 回调
     * @param event 回调的类参数
     */
    @Subscribe(threadMode = ThreadMode.MAIN)
    public void onMessageEvent(InfraredMessageEvent event) {
        if (event != null) {
            try {
                if(event.isCustom()){//是否自定义处理
                    InfraredController.getInstance().recovery(event.isCustom(),event.isPersonExist(),event.getFrequency());
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void getMallDict(String type, final int tag){
        BaseHttpServiceInter serviceInter = new HttpUtil().getMyBaseService();
        if(serviceInter!=null){
            serviceInter.getMallDicts(type)
                    .map(new HttpMallDictsFunction<List<MallDictsBean>>())
                    .subscribeOn(Schedulers.io())
                    .unsubscribeOn(Schedulers.io())
                    .observeOn(AndroidSchedulers.mainThread())
                    .subscribe(new Observer<List<MallDictsBean>>() {
                        @Override
                        public void onSubscribe(Disposable d) {
                            Log.i(TAG,"连接建立!");

                        }

                        @Override
                        public void onNext(List<MallDictsBean> value) {
                            Log.i(TAG,"请求完成："+value);
                            if(value.size()>0){
                                MallDictsBean dictsBean=value.get(0);
                                if(tag==0){
                                    countShutTime=Integer.parseInt(dictsBean.getValue());
                                }else if(tag==1){
                                    countGuidetime=Integer.parseInt(dictsBean.getValue());
                                }else if(tag==2){
                                    shutVolume=Integer.parseInt(dictsBean.getValue());
                                }else if(tag==3){
                                    guideVolume=Integer.parseInt(dictsBean.getValue());
                                }else if(tag==4){
                                    shut_switch=dictsBean.getValue();
                                }

                            }

                        }

                        @Override
                        public void onError(Throwable e){
                            Log.i(TAG,"异常：");
                            e.printStackTrace();
                        }

                        @Override
                        public void onComplete() {

                        }
                    });
        }
    }

    /**
     * 设置音量的大小
     * @param volume
     */
    private void setVolume(int volume){
        isChangeShutVolum=true;
        isChangeGuideVolum=true;
        AudioManager mAudioManager = (AudioManager)RyApplication.getContext().getSystemService(Context.AUDIO_SERVICE);
        int maxVolume=mAudioManager.getStreamMaxVolume(AudioManager.STREAM_SYSTEM);
        Log.i(TAG,"系统的最大音量是："+maxVolume);
        mAudioManager.setStreamVolume(AudioManager.STREAM_SYSTEM,
                volume , AudioManager.FLAG_PLAY_SOUND);
    }
}
