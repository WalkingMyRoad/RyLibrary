package com.ist.rylibrary.myfloatwindow.service;

import android.app.ActivityManager;
import android.app.Service;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.os.IBinder;
import android.support.annotation.Nullable;
import android.util.Log;

import com.ist.rylibrary.base.application.RyApplication;
import com.ist.rylibrary.base.service.InfraredService;
import com.ist.rylibrary.base.util.ToolUtil;
import com.ist.rylibrary.myfloatwindow.controller.FloatWindowController;
import com.ist.rylibrary.myfloatwindow.event.FloatWindowEvent;

import org.greenrobot.eventbus.EventBus;
import org.greenrobot.eventbus.Subscribe;
import org.greenrobot.eventbus.ThreadMode;

import java.util.ArrayList;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;

/**
 * Created by minyuchun on 2017/3/7.
 */

public class FloatWindowService extends Service{
    private static Intent sIntent;
    /**悬浮窗广播实例*/
    private static FloatWindowService mFloatWindowService;
    /**打开悬浮窗*/
    public static final int FLOAT_OPEN = 0;
    /**关闭悬浮窗*/
    public static final int FLOAT_CLOSE = 1;
    /**销毁悬浮窗*/
    public static final int FLOAT_DESTROY = -1;


    public static void getInstance(Context context){
        sIntent = new Intent(context, FloatWindowService.class);
        context.startService(sIntent);
    }
    /***
     * 关闭服务
     * @param context
     */
    public static void finishService(Context context){
        if(sIntent!=null){
            context.stopService(sIntent);
            sIntent = null;
        }
    }

    @Override
    public void onCreate() {
        super.onCreate();
        ToolUtil.getInstance().loadEventBus(this);
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        return super.onStartCommand(intent, flags, startId);
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        ToolUtil.getInstance().relieveEventBus(this);
    }
    /**用户切换漂浮的语音条*/
    @Subscribe(threadMode = ThreadMode.MAIN)
    public void onMessageEvent(FloatWindowEvent event) {
        if(event!=null){
            if(!event.isCustom()){
                FloatWindowController.getInstance().defaultHandling(
                        event.getFloatState(),event.getRobotMessage(),event.getPersonMessage());
            }else{
                FloatWindowController.getInstance().recovery(
                        event.isCustom(),event.getFloatState(),event.getRobotMessage(),event.getPersonMessage());
            }
        }
    }

    private String getThisPackActivityName() {
        try{
            ActivityManager manager = (ActivityManager)getSystemService(ACTIVITY_SERVICE) ;
            List<ActivityManager.RunningTaskInfo> runningTaskInfos = manager.getRunningTasks(1) ;
            if(runningTaskInfos != null){
                ComponentName cn = runningTaskInfos.get(0).topActivity;
                if(cn.getPackageName().equals(this.getPackName())){
                    return cn.getClassName();
                }
            }
        }catch (Exception e){
            e.printStackTrace();
        }
        return "";
    }

    private String getPackName(){
        try{
            return this.getPackageName();
        }catch (Exception e){
            e.printStackTrace();
        }
        return "";
    }

    /**
     * 判断当前界面是否是桌面
     */
    private boolean isHome() {
        ActivityManager mActivityManager = (ActivityManager) getSystemService(Context.ACTIVITY_SERVICE);
        List<ActivityManager.RunningTaskInfo> rti = mActivityManager.getRunningTasks(1);
        return getHomes().contains(rti.get(0).topActivity.getPackageName());
    }

    /**
     * 获得属于桌面的应用的应用包名称
     *
     * @return 返回包含所有包名的字符串列表
     */
    private List<String> getHomes() {
        List<String> names = new ArrayList<String>();
        PackageManager packageManager = this.getPackageManager();
        Intent intent = new Intent(Intent.ACTION_MAIN);
        intent.addCategory(Intent.CATEGORY_HOME);
        List<ResolveInfo> resolveInfo = packageManager.queryIntentActivities(intent,
                PackageManager.MATCH_DEFAULT_ONLY);
        for (ResolveInfo ri : resolveInfo) {
            names.add(ri.activityInfo.packageName);
        }
        return names;
    }

    @Nullable
    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }

}
