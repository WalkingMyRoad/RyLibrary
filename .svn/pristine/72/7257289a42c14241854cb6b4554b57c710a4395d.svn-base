package com.ist.rylibrary.base.controller;

import android.media.MediaPlayer;
import android.util.Log;

import com.google.gson.Gson;
import com.iflytek.thirdparty.E;
import com.ist.asr.RRasr;
import com.ist.asr.RRtts;
import com.ist.rylibrary.base.application.RyApplication;
import com.ist.rylibrary.base.entity.FinalQABean;
import com.ist.rylibrary.base.entity.FinalQAnswerBean;
import com.ist.rylibrary.base.event.AiuiMessageEvent;
import com.ist.rylibrary.base.event.NetWorkMessageEvent;
import com.ist.rylibrary.base.listener.BaseAiuiListener;
import com.ist.rylibrary.base.listener.BaseRRasrListener;
import com.ist.rylibrary.base.listener.BaseRRttsListener;
import com.ist.rylibrary.base.listener.RyRRttsListener;
import com.ist.rylibrary.base.service.AiuiService;
import com.ist.rylibrary.base.service.InfraredService;
import com.ist.rylibrary.base.util.ToolUtil;
import com.ist.rylibrary.myfloatwindow.controller.FloatWindowController;
import com.ist.rylibrary.myfloatwindow.service.FloatWindowService;
import com.renying.m4.AIUI2;
import com.renying.m4.AiuiObj;
import com.renying.m4.Xunfei;

import org.greenrobot.eventbus.EventBus;
import org.json.JSONArray;
import org.json.JSONObject;

/**
 * Created by minyuchun on 2017/3/25.
 * aiui控制类
 */

public class AiuiController {
    /**播放的实例*/
    private AiuiObj aiui;
    /**播放的类型*/
    private String AiuiType;
    /**语音合成对象*/
    private RRasr asr;
    /**语音识别对象*/
    private RRtts tts;
    /**每一次的问答结果类*/
    private FinalQABean finalQABean = null;
    /**屏蔽识别的话之后解析*/
    private String[] ShieldAsk;
    /**aiui监听*/
    private AiuiListener mAiuiListener;
    /**当前的爱意控制器实例*/
    private static AiuiController mAiuiController;
    /**引导流程的监听*/
    private YinDaoListener mYinDaoListener;
    /**讲解流程的监听*/
    private JiangJieListener mJiangJieListener;
    /**解析问答类*/
    FinalQABean qAnswer = null;
    /**是否允许语音被打断*/
    private boolean isAllowInterrupt = true;
    /**自定义语音合成接口*/
    private RyRRttsListener mRyRRttsListener;

    public static AiuiController getInstance(){
        if(mAiuiController == null){
            mAiuiController = new AiuiController();
        }
        return mAiuiController;
    }

    private AiuiController(){
        ShieldAsk = new String[]{"嗯","嗯。","一","一。","阿","啊","啦","唉","呢","吧","了","哇","呀","吗","哦","哈","哟","么"};
    }


    public interface AiuiListener{
        /***
         *  aiui自定义返回
         * @param aiuiType 返回类型
         * @param isCustom  是否自定义
         * @param message  返回的数据
         */
        void AiuiMessage(int aiuiType,boolean isCustom,String message);
    }

    /***
     * 添加监听
     * @param aiuiListener 监听
     */
    public void setAiuiListener(AiuiListener aiuiListener){
        this.mAiuiListener = aiuiListener;
    }

    /**
     * 发送消息
     * @param type aiui类型
     */
    public void post(int type){
        post(type,false,null);
    }

    /**
     * 发送消息
     * @param message  发送的信息
     */
    public void post(String message){
        post(AiuiService.AIUI_TYPE_DEFAULT,false,message);
    }
    /**
     * 发送消息
     * @param isCustom  是否自定义
     * @param message  发送的信息
     */
    public void post(boolean isCustom,String message){
        post(AiuiService.AIUI_TYPE_DEFAULT,isCustom,message);
    }
    /***
     * 发送信息
     * @param type aiui类型
     * @param isCustom 是否自定义
     * @param message 发送的信息
     */
    public void post(int type,boolean isCustom,String message){
        EventBus.getDefault().post(new AiuiMessageEvent(type,isCustom,message));
    }
    /**
     * 回收方法
     * @param type  消息类型
     * @param isCustom  是否自定义
     * @param message  消息内容
     */
    public void recovery(int type,boolean isCustom,String message){
        if(mAiuiListener!=null){
            mAiuiListener.AiuiMessage(type,isCustom,message);
        }
    }
    public FinalQABean getFinalQABean() {
        return finalQABean;
    }

    public void setFinalQABean(FinalQABean finalQABean) {
        this.finalQABean = finalQABean;
    }

    /***
     * 初始化语音合成模块
     */
    public void initRRArs(){
        try{
            RRasr.InitApp(RyApplication.getContext());
            asr = new RRasr();
            asr.SetDefaultAnswer("哎呀，我没听明白呢;贵宾，您说慢点，RR还在学习中呢;没有听清楚呢，您在大声的说一遍");
            BaseRRasrListener mRRasrListener = new BaseRRasrListener();
            asr.InitActivity(RyApplication.getContext(), mRRasrListener, true);
        }catch (Exception e){
            e.printStackTrace();
        }
    }
    /***
     * 初始化语音识别模块
     */
    public void initRRtts(){
        try{
            tts = new RRtts();
            BaseRRttsListener mRRttsListener = new BaseRRttsListener(tts);
            tts.InitActivity(RyApplication.getContext(), mRRttsListener, "local");
        }catch (Exception e){
            e.printStackTrace();
        }
    }
    /**
     * aiui配置觉醒
     */
    public void AiuiWork() {
        try{
            if (aiui == null) {
                aiui = getNewObj();
                BaseAiuiListener mAIUIListener = new BaseAiuiListener(AiuiType);
                if(aiui!=null){
                    aiui.SetContext(RyApplication.getContext());
                    aiui.AIUIWork(mAIUIListener, 0, 0, "");
                }
            }
        }catch (Exception e){
            e.printStackTrace();
        }
    }

    /***
     * 新建aiui实例
     * @return  返回新建的aiui
     */
    private AiuiObj getNewObj() {
            AiuiObj obj = null;
            try{
                AiuiType = AiuiObj.getAiuiType();
                if (AiuiType.equals("aiui")) {
                    obj = new AIUI2();
                }else{
                    obj = new Xunfei();
                }
            }catch (Exception e){
                e.printStackTrace();
        }
        return obj;
    }
    /**
     * AIUI/5麦唤醒，统一调用该函数
     */
    public void AiuiWakeUp() {
        try{
            if (aiui!=null) {
                aiui.WakeUp();
                RyApplication.getLog().d("AiuiController aiui唤醒");
            }
        }catch (Exception e){
            e.printStackTrace();
        }
    }
    /***
     * 识别停止
     */
    public void AiuiSleep(){
        try{
            if (aiui!=null){
                aiui.ResetAiui();//休眠-停止识别
                RyApplication.getLog().d("AiuiController aiui识别停止");
            }
        }catch (Exception e){
            e.printStackTrace();
        }
    }
    /**停止语音合成*/
    public void stopTTS() {
        if (tts != null) {
            tts.Cancel();
        }
    }
    /**
     * 开始语音合成
     * @param text 播放的语音内容
     */
    public void startTTS(final String text) {
        if (tts != null) {
            new Thread(new Runnable() {
                @Override
                public void run() {
                    int result = tts.Start(text);
                    FloatWindowController.getInstance().post(text,null);
                }
            }).start();
        }
    }

    /**
     * 判断 问题是否合理
     * @return  是否是合格的问题
     */
    private synchronized boolean isAskRationality(String ask){
        return !(ask!=null && ask.length()<2);
    }


    /***
     * 设置引导流程的监听
     * @param yinDaoListener
     */
    public void setYinDaoListener(YinDaoListener yinDaoListener) {
        mYinDaoListener = yinDaoListener;
    }

    public void setJiangJieListener(JiangJieListener jiangJieListener) {
        mJiangJieListener = jiangJieListener;
    }

    public void setJiangJieComplete(boolean isComplete){
        if(mJiangJieListener!=null){
            mJiangJieListener.JiangJieComplete(isComplete);
        }
    }
    public void setYinDaoComplete(boolean isComplete){
        if(mYinDaoListener!=null){
            mYinDaoListener.YinDaoComplete(isComplete);
        }
    }

    /***
     * 　底盘监听回调
     */
    public interface YinDaoListener{
        void YinDaoComplete(boolean isComplete);
    }

    /***
     * 　讲解的底盘监听
     */
    public interface JiangJieListener{
        void JiangJieComplete(boolean isComplete);
    }

    /**
     * 语义分析结果
     * @param jsonObject  传递的识别结果
     */
    public void analysisResult(JSONObject jsonObject){
        try{
            //有语义返回，引导到家时清0
            InfraredService.guideTime=0;
            //语音识别结果返回
            RyApplication.getLog().d("原始返回结果的语义 "+jsonObject.toString());
            if(!AiuiType.equals("aiui")){
                qAnswer = analysis5(jsonObject);
            }else{
                qAnswer = analysisAiui(jsonObject);
            }
            if (qAnswer!=null && qAnswer.getText()!=null){
                for (String str: ShieldAsk) {
                    if(qAnswer.getText().equals(str)){
                        return;
                    }
                }
                FloatWindowController.getInstance().post(null,qAnswer.getText());
                SceneController.getInstance().rrPeople(qAnswer);
            }
        }catch (Exception e){
            e.printStackTrace();
        }
    }

    /***
     * aiui 解析
     * @param jsonObject
     */
    public FinalQABean analysisAiui(JSONObject jsonObject){
        //讯飞集成语义转换解析
        try{
            Gson gson = new Gson();
            finalQABean = gson.fromJson(jsonObject.toString(),FinalQABean.class);
        }catch (Exception e){
            e.printStackTrace();
        }
        try{
            if(finalQABean==null){
                finalQABean = new FinalQABean();
                finalQABean.setService(ToolUtil.getInstance().readStringJson(jsonObject,"service"));
                finalQABean.setText(ToolUtil.getInstance().readStringJson(jsonObject,"text"));
                if(jsonObject.has("answer")){
                    JSONObject jsAnswer = jsonObject.getJSONObject("answer");
                    if(jsAnswer!=null){
                        FinalQAnswerBean finalQAnswerBean = new FinalQAnswerBean();
                        finalQAnswerBean.setText(ToolUtil.getInstance().readStringJson(jsAnswer,"text"));
                    }
                }
            }
        }catch (Exception e){
            e.printStackTrace();
        }
        return finalQABean;
    }

    /***
     * 5麦 解析
     * @param jsonObject
     */
    public FinalQABean analysis5(JSONObject jsonObject){
        Log.i("BaseAiuiListener","5麦开始解析");
        FinalQABean qAnswer = new FinalQABean();
        try{
            if(jsonObject.has("text") && jsonObject.has("answer")){//普通答案
                qAnswer.setText(jsonObject.getString("text"));
                JSONObject jsAnswer = jsonObject.getJSONObject("answer");
                FinalQAnswerBean finalQAnswerBean = new FinalQAnswerBean();
                finalQAnswerBean.setText(jsAnswer.getString("text"));
                qAnswer.setAnswer(finalQAnswerBean);//默认的回答
            }else if (jsonObject.has("text") && jsonObject.has("data") && jsonObject.has("service")) {
                qAnswer.setText(jsonObject.getString("text"));
                String service = jsonObject.getString("service");
                JSONObject jsData = jsonObject.getJSONObject("data");
                if (service.equals("weather")) {//天气
                    FinalQAnswerBean finalQAnswerBean = new FinalQAnswerBean();
                    finalQAnswerBean.setText(getWeather(jsData.getJSONArray("result")));
                    qAnswer.setAnswer(finalQAnswerBean);
                } else if (service.equals("music")) {//音乐
                    FinalQAnswerBean finalQAnswerBean = new FinalQAnswerBean();
                    finalQAnswerBean.setText(getMusic5(jsData.getJSONArray("result")));
                    qAnswer.setAnswer(finalQAnswerBean);
                }
            }else if(jsonObject.has("text")){
                qAnswer.setText(jsonObject.getString("text"));
            }
        }catch (Exception e){
            e.printStackTrace();
        }
        return qAnswer;
    }

    /***
     * 获得普通的答案
     * @param jsAnswer
     * @return
     */
    private String getOrdinary(JSONObject jsAnswer){
        String answer = null;
        try{
            if(jsAnswer.has("text")){
                answer = jsAnswer.getString("text");
            }
        }catch (Exception e){
            e.printStackTrace();
        }finally {
            return answer;
        }
    }
    /**
     * 解析5麦音乐
     * @param jaResult
     * @return
     */
    private String getMusic5(JSONArray jaResult){
        String singer = null,name = null;
        try{
            if(jaResult.length()>0){
                JSONObject jsAnswer = jaResult.getJSONObject(0);
                final String path = jsAnswer.getString("downloadUrl");
                name = jsAnswer.getString("name");
                singer = jsAnswer.getString("singer");
                new Thread(new Runnable() {
                    @Override
                    public void run() {
                        MediaVoiceController.playVoice(path, new MediaPlayer.OnCompletionListener() {
                            @Override
                            public void onCompletion(MediaPlayer mediaPlayer) {
//                                EventBus.getDefault().post(new AiuiMessageEvent("您是否还需要听其他的歌曲呢？如果需要，请报歌名！"));
                                AiuiController.getInstance().post("您是否还需要听其他的歌曲呢？如果需要，请报歌名！");
                            }
                        }, new MediaPlayer.OnErrorListener() {
                            @Override
                            public boolean onError(MediaPlayer mediaPlayer, int i, int i1) {
                                return false;
                            }
                        });
                    }
                }).start();
            }
        }catch (Exception e){
            e.printStackTrace();
        }finally {
            if(singer!=null && name!=null){
                return "请欣赏" + singer + "," + name;
            }else{
                return null;
            }
        }
    }

    /***
     * 获取天气的解析
     * @param jaResult
     * @return
     */
    private String getWeather(JSONArray jaResult){
        String answer = null;
        try{
            if(jaResult.length()>0){
                JSONObject jsWeather = jaResult.getJSONObject(0);
                if(jsWeather.has("weather")){
                    answer = "天气"+jsWeather.getString("weather");
                }
                if(jsWeather.has("airQuality")){
                    answer = answer+";空气质量是"+jsWeather.getString("airQuality");
                }
                if(jsWeather.has("tempRange")){
                    answer = answer+";温度"+jsWeather.getString("tempRange");
                }
                if(jsWeather.has("wind")){
                    answer = answer+";"+jsWeather.getString("wind");
                }
            }
        }catch (Exception e){
            e.printStackTrace();
        }finally {
            if(answer!=null){
                return answer;
            }else{
                return null;
            }
        }
    }

    public boolean isAllowInterrupt() {
        return isAllowInterrupt;
    }

    public void setAllowInterrupt(boolean allowInterrupt) {
        isAllowInterrupt = allowInterrupt;
    }

    public void setRyRRttsListener(RyRRttsListener listener) throws RuntimeException{
        mRyRRttsListener = listener;
    }

    public void RRttsComplete(String s) throws RuntimeException{
        if (mRyRRttsListener!=null){
            if(mRyRRttsListener.onComplete(s)){
                mRyRRttsListener = null;
            }
        }
    }
}
