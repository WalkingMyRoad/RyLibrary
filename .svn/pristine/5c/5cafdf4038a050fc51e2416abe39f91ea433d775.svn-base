package com.ist.rylibrary.base.service;

import android.app.AlarmManager;
import android.app.PendingIntent;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.os.IBinder;
import android.os.SystemClock;
import android.util.Log;
import android.widget.Toast;

import com.ist.rylibrary.base.application.RyApplication;
import com.ist.rylibrary.base.controller.SharedPreferencesController;
import com.ist.rylibrary.base.controller.WebSocketController;
import com.ist.rylibrary.base.event.WebSocketMessageEvent;
import com.ist.rylibrary.base.util.ToolUtil;

import org.greenrobot.eventbus.EventBus;
import org.greenrobot.eventbus.Subscribe;
import org.greenrobot.eventbus.ThreadMode;
import org.json.JSONObject;

import de.tavendo.autobahn.WebSocketConnection;
import de.tavendo.autobahn.WebSocketException;
import de.tavendo.autobahn.WebSocketHandler;

/**
 * Created by minyuchun on 2017/2/22.
 */

public class WebSocketService extends Service{
    /**发送信息类型*/
    public static final int SOCKET_SEND = 1;
    /**接收信息类型*/
    public static final int SOCKET_ACCEPT = 2;
    /**开启服务Intent*/
    public static Intent sIntent;

    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }

    public static void  getInstance(Context context){
        startService(context);
    }

    private static void startService(Context context){
        sIntent = new Intent(context, WebSocketService.class);
        context.startService(sIntent);
    }
    /***
     * 关闭服务
     * @param context
     */
    public static void finishService(Context context){
        if(sIntent!=null){
            context.stopService(sIntent);
            sIntent = null;
        }
    }

    @Override
    public void onCreate() {
        super.onCreate();
        ToolUtil.getInstance().loadEventBus(this);
        try{
            WebSocketController.getInstance().connect();
        }catch (Exception e){
            e.printStackTrace();
        }
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        return super.onStartCommand(intent, flags, startId);
    }


    @Override
    public void onDestroy() {
        super.onDestroy();
        ToolUtil.getInstance().relieveEventBus(this);
    }

    @Subscribe(threadMode = ThreadMode.MAIN)
    public void onMessageEvent(WebSocketMessageEvent event) {
        if(event!=null){
            if(!event.isCustom()) {
                WebSocketController.getInstance().defaultHandling(event.getType(),event.getMessage());
            }else{
                WebSocketController.getInstance().recovery(event.isCustom(),event.getType(),event.getMessage());
            }
        }
    }

}
